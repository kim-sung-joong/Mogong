{"version":3,"sources":["DenseAppBar.js","FooterBar.js","MainImage.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","DenseAppBar","classes","className","AppBar","position","Toolbar","variant","Typography","color","bottom","width","height","textAlign","FooterBar","MainImage","props","state","charPoses","exit","y","opacity","enter","transition","charInWordIndex","type","delay","stiffness","damping","image","afterUrl","changeimage","file","selectedFile","formData","FormData","document","getElementById","files","alert","append","axios","method","url","timeout","headers","processData","mimeType","contentType","data","then","res","setState","link","response","console","log","catch","error","getElementsById","reset","style","display","src","this","alt","margin","accept","id","multiple","onChange","uploadImage","htmlFor","Button","component","Component","padding","Content","Paper","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a4f8cbc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function DenseAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\" >\r\n            High Quality Photo\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    position : 'fixed',\r\n    bottom : 0,\r\n    width: '100%',\r\n    height : '2.5rem',\r\n    textAlign :'center',\r\n  },\r\n}));\r\n\r\nexport default function FooterBar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n             \r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React ,{ Component } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass MainImage extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      charPoses : {\r\n        exit: { y: 20, opacity: 0 },\r\n        enter: {\r\n          y: 0,\r\n          opacity: 1,\r\n          transition: ({ charInWordIndex }) => ({\r\n            type: 'spring',\r\n            delay: charInWordIndex * 30,\r\n            stiffness: 500 + charInWordIndex * 150,\r\n            damping: 10 - charInWordIndex * 1\r\n          })\r\n        }\r\n      },\r\n      image : '',\r\n      afterUrl : '',\r\n      changeimage : '',\r\n      file : null,\r\n      selectedFile: null,\r\n    }\r\n  }\r\n  uploadImage(){\r\n    const formData = new FormData()\r\n    const file = document.getElementById('ex_file').files[0]\r\n    if(file==null){\r\n      alert(\"이미지를 선택해 주세요.\")\r\n    }\r\n    else{\r\n      formData.append(\"image\",file)\r\n      axios({\r\n        method : \"POST\",\r\n        url : \"https://api.imgur.com/3/image\",\r\n        timeout: 0,\r\n        headers: {\r\n          \"Authorization\": \"Client-ID acd50197869043a\",\r\n        },\r\n        processData: false,\r\n        mimeType: \"multipart/form-data\",\r\n        contentType: false,\r\n        data: formData\r\n      })\r\n      .then(res=> {\r\n        this.setState({\r\n          image : res.data.data.link,\r\n        });\r\n        axios({\r\n          url : \"/upload.do?url=\"+this.state.image,\r\n          headers : {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n          },\r\n          data : this.state.image,\r\n        })\r\n        .then(response=>{\r\n          console.log(\"이미지 보내기 완료.\")\r\n          this.setState({\r\n            afterUrl : response.data\r\n          });\r\n        })\r\n        .catch( error=>{\r\n          console.log('실패',error)\r\n        })\r\n        \r\n      })\r\n      \r\n    }\r\n    }\r\n    resetInput(){\r\n      document.getElementsById('ex_file').reset();\r\n    }\r\n    render(){\r\n    return(\r\n      <div>\r\n        <div style={{width:\"100%\", textAlign:\"center\"}}>\r\n          <div style={{display:\"inline-block\"}}>\r\n            <img src={this.state.image} alt=\"\" style={{width:\"300px\",height:\"auto\" , marginRight:\"10px\"}}></img>\r\n            <img src={this.state.afterUrl} alt=\"\" style={{width:\"300px\",height:\"auto\"}}></img>\r\n          </div>\r\n        </div>\r\n        <br/>\r\n        <div style={{margin:\"auto\"}}>\r\n            <div>\r\n            <input\r\n              accept=\"image/*\"\r\n              style={{ display: 'none' }}\r\n              id=\"ex_file\"\r\n              multiple\r\n              type=\"file\"\r\n              onChange={()=>this.uploadImage()}\r\n            />\r\n            <label htmlFor=\"ex_file\">\r\n              <Button variant=\"contained\" component=\"div\" color=\"primary\">\r\n                Upload Image\r\n              </Button>\r\n            </label> \r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n} \r\nexport default MainImage;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MainImage from './MainImage.js';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n    textAlign : 'center',\r\n  },\r\n}));\r\nexport default function Content() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          사진 화질 높이기.\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          저화질의 사진을 고화질의 사진으로 바꿔보세요.\r\n          하나의 사진만 가능합니다.\r\n        </Typography>\r\n        <br/>\r\n        <br/>\r\n        <MainImage></MainImage>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport DenseAppBar from './DenseAppBar.js';\r\nimport FooterBar from './FooterBar.js';\r\nimport Content from './Content.js';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <DenseAppBar></DenseAppBar>\r\n      </header>\r\n      <section>\r\n        <Content></Content>\r\n      </section>\r\n      <footer>\r\n        <FooterBar></FooterBar>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}