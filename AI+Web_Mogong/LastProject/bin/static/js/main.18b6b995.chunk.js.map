{"version":3,"sources":["DenseAppBar.js","FooterBar.js","MainImage.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","DenseAppBar","classes","className","AppBar","position","Toolbar","variant","Typography","color","bottom","width","height","textAlign","FooterBar","MainImage","props","state","charPoses","exit","y","opacity","enter","transition","charInWordIndex","type","delay","stiffness","damping","image","changeimage","file","selectedFile","formData","FormData","document","getElementById","files","alert","append","axios","method","url","timeout","headers","processData","mimeType","contentType","data","then","res","setState","link","response","console","log","JSON","stringify","catch","error","getElementsById","reset","style","display","src","this","alt","margin","accept","id","multiple","onChange","uploadImage","htmlFor","Button","component","Component","padding","Content","Paper","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18b6b995.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function DenseAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\" >\r\n            High Quality Photo\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    position : 'fixed',\r\n    bottom : 0,\r\n    width: '100%',\r\n    height : '2.5rem',\r\n    textAlign :'center',\r\n  },\r\n}));\r\n\r\nexport default function FooterBar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n             \r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React ,{ Component } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass MainImage extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      charPoses : {\r\n        exit: { y: 20, opacity: 0 },\r\n        enter: {\r\n          y: 0,\r\n          opacity: 1,\r\n          transition: ({ charInWordIndex }) => ({\r\n            type: 'spring',\r\n            delay: charInWordIndex * 30,\r\n            stiffness: 500 + charInWordIndex * 150,\r\n            damping: 10 - charInWordIndex * 1\r\n          })\r\n        }\r\n      },\r\n      image : '',\r\n      changeimage : '',\r\n      file : null,\r\n      selectedFile: null,\r\n    }\r\n  }\r\n  uploadImage(){\r\n    const formData = new FormData()\r\n    const file = document.getElementById('ex_file').files[0]\r\n    if(file==null){\r\n      alert(\"이미지를 선택해 주세요.\")\r\n    }\r\n    else{\r\n      formData.append(\"image\",file)\r\n      axios({\r\n        method : \"POST\",\r\n        url : \"https://api.imgur.com/3/image\",\r\n        timeout: 0,\r\n        headers: {\r\n          \"Authorization\": \"Client-ID acd50197869043a\",\r\n        },\r\n        processData: false,\r\n        mimeType: \"multipart/form-data\",\r\n        contentType: false,\r\n        data: formData\r\n      })\r\n      .then(res=> {\r\n        this.setState({\r\n          image : res.data.data.link,\r\n        });\r\n        let form = new FormData()\r\n        form.append('imageUrl', this.state.image)\r\n        // 'localhost:8080/upload.do' , form\r\n        axios({\r\n          url : \"http://localhost:8080/upload.do\",\r\n          headers : {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"SameSite\" : \"None\",\r\n          },\r\n          data : this.state.image,\r\n        })\r\n        .then(response=>{\r\n          console.log(\"이미지 보내기 완료.\",JSON.stringify(response, null, 2))\r\n        })\r\n        .catch( error=>{\r\n          console.log('실패',error)\r\n        })\r\n      })\r\n    }\r\n    }\r\n    resetInput(){\r\n      document.getElementsById('ex_file').reset();\r\n    }\r\n    render(){\r\n    return(\r\n      <div>\r\n        <div style={{width:\"100%\", textAlign:\"center\"}}>\r\n          <div style={{display:\"inline-block\"}}>\r\n            <img src={this.state.image} alt=\"\" style={{width:\"45%\",height:\"auto\" , marginRight:\"2%\"}}></img>\r\n            <img src={this.state.image} alt=\"\" style={{width:\"45%\",height:\"auto\"}}></img>\r\n          </div>\r\n        </div>\r\n        <br/>\r\n        <div style={{margin:\"auto\"}}>\r\n            <div>\r\n            <input\r\n              accept=\"image/*\"\r\n              style={{ display: 'none' }}\r\n              id=\"ex_file\"\r\n              multiple\r\n              type=\"file\"\r\n              onChange={()=>this.uploadImage()}\r\n            />\r\n            <label htmlFor=\"ex_file\">\r\n              <Button variant=\"contained\" component=\"div\" color=\"primary\">\r\n                Upload Image\r\n              </Button>\r\n            </label> \r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n} \r\nexport default MainImage;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MainImage from './MainImage.js';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n    textAlign : 'center',\r\n  },\r\n}));\r\nexport default function Content() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Paper className={classes.root}>\r\n        <Typography variant=\"h5\" component=\"h3\">\r\n          사진 화질 높이기.\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          저화질의 사진을 고화질의 사진으로 바꿔보세요.\r\n          하나의 사진만 가능합니다.\r\n        </Typography>\r\n        <br/>\r\n        <br/>\r\n        <MainImage></MainImage>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport DenseAppBar from './DenseAppBar.js';\nimport FooterBar from './FooterBar.js';\nimport Content from './Content.js';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <DenseAppBar></DenseAppBar>\n      </header>\n      <section>\n        <Content></Content>\n      </section>\n      <footer>\n        <FooterBar></FooterBar>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}